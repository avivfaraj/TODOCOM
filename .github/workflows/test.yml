## Code from https://github.com/marketplace/actions/install-poetry-action
name: Test & Publish

on:
  push:
    branches:
      - 'main'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install test libraries
        run: |
          pip install pytest
          pip install flake8
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          pytest ./
          flake8 ./

  # Publish to Pypi
  build_and_publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Gets all tags and repo history
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # Test in Test Pypi
      #----------------------------------------------
      - name: Test package in Test PyPi
        run: |
          poetry install --no-interaction
          # set version number equal to latest git tag
          poetry version $(git tag | tail -1)

          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.PYPI_TEST_TOKEN }}
          poetry publish -r testpypi

      - name: Publish package
        run:
          poetry publish --build -u __token__ -p ${{ secrets.PYPI_TOKEN }}
